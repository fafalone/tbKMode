Module modFltMgr
'UPDATED 11/15/2023 MOST RECENT

Public Type FLT_OPERATION_REGISTRATION
    MajorFunction As Byte
    Flags As Long
    PreOperation As LongPtr
    PostOperation As LongPtr
    Reserved1 As LongPtr
End Type

Public Enum FLT_PREOP_CALLBACK_STATUS
    FLT_PREOP_SUCCESS_WITH_CALLBACK
    FLT_PREOP_SUCCESS_NO_CALLBACK
    FLT_PREOP_PENDING
    FLT_PREOP_DISALLOW_FASTIO
    FLT_PREOP_COMPLETE
    FLT_PREOP_SYNCHRONIZE
    FLT_PREOP_DISALLOW_FSFILTER_IO
End Enum

Public Enum FLT_POSTOP_CALLBACK_STATUS
    FLT_POSTOP_FINISHED_PROCESSING
    FLT_POSTOP_MORE_PROCESSING_REQUIRED
    FLT_POSTOP_DISALLOW_FSFILTER_IO
End Enum

'   Registration version for XP SP2 and W2K3 SP1
Public Const FLT_REGISTRATION_VERSION_0200  = &H0200
'   Registration version for Vista Beta 2
'   (adds PFLT_TRANSACTION_NOTIFICATION_CALLBACK)
Public Const FLT_REGISTRATION_VERSION_0201  = &H0201
'   Registration version for Vista RTM
'   (adds PFLT_NORMALIZE_NAME_COMPONENT_EX)
Public Const FLT_REGISTRATION_VERSION_0202  = &H0202
'   Registration version for Win 8
'   (adds PFLT_SECTION_CONFLICT_NOTIFICATION_CALLBACK)
Public Const FLT_REGISTRATION_VERSION_0203  = &H0203

Public Enum FLT_REGISTRATION_FLAGS
    FLTFL_REGISTRATION_DO_NOT_SUPPORT_SERVICE_STOP = &H1
    FLTFL_REGISTRATION_SUPPORT_NPFS_MSFS = &H2
    FLTFL_REGISTRATION_SUPPORT_DAX_VOLUME = &H4
End Enum
'#Const FLT_MGR_WIN8 = 1
#If FLT_MGR_WIN8 Then
    Public Const FLT_REGISTRATION_VERSION = FLT_REGISTRATION_VERSION_0203
#Else
    Public Const FLT_REGISTRATION_VERSION = FLT_REGISTRATION_VERSION_0202
#End If
Public Type _FLT_REGISTRATION
    Size As Integer
    Version As Integer
    Flags As FLT_REGISTRATION_FLAGS
    ContextRegistration As LongPtr
    OperationRegistration As LongPtr
    FilterUnloadCallback As LongPtr
    InstanceSetupCallback As LongPtr
    InstanceQueryTeardownCallback As LongPtr
    InstanceTeardownStartCallback As LongPtr
    InstanceTeardownCompleteCallback As LongPtr
    GenerateFileNameCallback As LongPtr
    NormalizeNameComponentCallback As LongPtr
    NormalizeContextCleanupCallback As LongPtr
    'VISTA+
    TransactionNotificationCallback As LongPtr
    NormalizeNameComponentExCallback As LongPtr
    #If FLT_MGR_WIN8 Then
    SectionNotificationCallback As LongPtr
    #End If
End Type

Public Enum FLT_FILTER_UNLOAD_FLAGS
'If set, the OS has requested to unload this filter and the operation
'can not be failed.
    FLTFL_FILTER_UNLOAD_MANDATORY = &H00000001
End Enum

Public Type _FLT_RELATED_OBJECTS
    Size As Integer
    TransactionContext As Integer
    Filter As LongPtr 'PFLT_FILTER
    Volume As LongPtr 'PFLT_VOLUME
    Instance As LongPtr 'PFLT_INSTANCE
    FileObject As LongPtr 'PFILE_OBJECT
    Transaction As LongPtr 'PKTRANSACTION
End Type

Public Const IRP_MJ_ACQUIRE_FOR_SECTION_SYNCHRONIZATION As Byte = &HFF
Public Const IRP_MJ_RELEASE_FOR_SECTION_SYNCHRONIZATION As Byte = &HFE
Public Const IRP_MJ_ACQUIRE_FOR_MOD_WRITE As Byte = &HFD
Public Const IRP_MJ_RELEASE_FOR_MOD_WRITE As Byte = &HFC
Public Const IRP_MJ_ACQUIRE_FOR_CC_FLUSH As Byte = &HFB
Public Const IRP_MJ_RELEASE_FOR_CC_FLUSH As Byte = &HFA
Public Const IRP_MJ_QUERY_OPEN As Byte = &HF9
Public Const IRP_MJ_FAST_IO_CHECK_IF_POSSIBLE As Byte = &HF4
Public Const IRP_MJ_NETWORK_QUERY_OPEN As Byte = &HF3
Public Const IRP_MJ_MDL_READ As Byte = &HF2
Public Const IRP_MJ_MDL_READ_COMPLETE As Byte = &HF1
Public Const IRP_MJ_PREPARE_MDL_WRITE As Byte = &HF0
Public Const IRP_MJ_MDL_WRITE_COMPLETE As Byte = &HEF
Public Const IRP_MJ_VOLUME_MOUNT As Byte = &HED
Public Const IRP_MJ_VOLUME_DISMOUNT As Byte = &HEC

Public Enum FLT_FILE_NAME_PARSED_FLAGS
    FLTFL_FILE_NAME_PARSED_FINAL_COMPONENT = &H0001
    FLTFL_FILE_NAME_PARSED_EXTENSION = &H0002
    FLTFL_FILE_NAME_PARSED_STREAM = &H0004
    FLTFL_FILE_NAME_PARSED_PARENT_DIR = &H0008
End Enum

Public Enum FLT_FILE_NAME_OPTIONS
    FLT_VALID_FILE_NAME_FORMATS = &H000000ff
    FLT_FILE_NAME_NORMALIZED = &H01
    FLT_FILE_NAME_OPENED = &H02
    FLT_FILE_NAME_SHORT = &H03
    FLT_VALID_FILE_NAME_QUERY_METHODS = &H0000ff00&
'   In the default mode, if it is safe to query the file system,
'   the Filter Manager try to retrieve the name from the cache first, and,
'   if a name is not found, the name will be generated by querying the file
'   system.
    FLT_FILE_NAME_QUERY_DEFAULT = &H0100
'   Query the Filter Manager's name cache for the name, but don't try
'   to query the file system if the name is not in the cache.
    FLT_FILE_NAME_QUERY_CACHE_ONLY = &H0200
'   Only query the file system for the name, bypassing the Filter Manager's
'   name cache completely.  Any name retrieved will not be cached.
    FLT_FILE_NAME_QUERY_FILESYSTEM_ONLY = &H0300
'   Query the Filter Manager's name cache, but if the name is not
'   found try to query the file system if it is safe to do so.
    FLT_FILE_NAME_QUERY_ALWAYS_ALLOW_CACHE_LOOKUP = &H0400
    FLT_VALID_FILE_NAME_FLAGS = &Hff000000
'   This flag is to be used by name provider filters to specify that a name
'   query request they are making should be redirected to their filter rather
'   than being satified by the name providers lower in the stack.
    FLT_FILE_NAME_REQUEST_FROM_CURRENT_PROVIDER = &H01000000
'   This flag denotes that the name retrieved from this query should not
'   be cached.  This is used by name providers as they perform intermediate
'   queries to generate a name.
    FLT_FILE_NAME_DO_NOT_CACHE = &H02000000
'   This flag denotes that it is safe to query the name in post-CREATE if
'   STATUS_REPARSE was returned.  To ensure the name returned is valid,
'   the call must know that the FileObject->FileName was not changed before
'   STATUS_REPARSE was returned.
    FLT_FILE_NAME_ALLOW_QUERY_ON_REPARSE = &H04000000
End Enum
Public Type FLT_FILE_NAME_INFORMATION
    Size As Integer
    '  For each bit that is set in the NamesParsed flags field, the
    '  corresponding substring from Name has been appropriately
    '  parsed into one of the unicode strings below.
    NamesParsed As FLT_FILE_NAME_PARSED_FLAGS
    '  The name format that this FLT_FILE_NAME_INFORMATION structure
    '  represents.
    Format As FLT_FILE_NAME_OPTIONS
    '  For normalized and opened names, this name contains the version of
    '  name in the following format:
    '    [Volume name][Full path to file][File name][Stream Name]
    '    For example, the above components would map to this example name as
    '    follows:
    '    \Device\HarddiskVolume1\Documents and Settings\MyUser\My Documents\Test Results.txt:stream1
    '    [Volume name] = "\Device\HarddiskVolume1"
    '    [Full path to file] = "\Documents and Settings\MyUser\My Documents\"
    '    [File name] = "Test Results.txt"
    '    [Stream name] = ":stream1"
    '  For short names, only the short name for the final name component is
    '  returned in the Name unicode string.  Therefore, if you requested
    '  the short name of the file object representing an open on the file:
    '    \Device\HarddiskVolume1\Documents and Settings\MyUser\My Documents\Test Results.txt
    '  The name returned in Name will be at most 8 characters followed by a '.'
    '  then at most 3 more characters, like:
    '    testre~1.txt
    Name As UNICODE_STRING
    '  The Volume is only filled in for name requested in normalized and opened
    '  formats.
    Volume As UNICODE_STRING
    '  The share component of the file name requested.  This will only be
    '  set for normalized and opened name formats on files that opened across
    '  redirectors.  For local files, this string will always be 0 length.
    Share As UNICODE_STRING
    '  To exemplify what each of the following substrings refer to, let's
    '  look again at the first example string from above:
    '    \Device\HarddiskVolume1\Documents and Settings\MyUser\My Documents\Test Results.txt:stream1
    '  Extension = "txt"
    '  Stream = ":stream1"
    '  FinalComponent = "Test Results.txt:stream1"
    '  ParentDir = "\Documents and Settings\MyUser\My Documents\"
    '  This can be parsed from a normalized, opened, or short name.
    Extension As UNICODE_STRING
    '  The following parse formats are only available for normalized and
    '  opened name formats, but not short names.
    Stream As UNICODE_STRING
    FinalComponent As UNICODE_STRING
    ParentDir As UNICODE_STRING
End Type

Public Enum FLT_CALLBACK_DATA_FLAGS
    FLTFL_CALLBACK_DATA_REISSUE_MASK = &H0000FFFF&
'   The below 3 flags are mutually exclusive.
'   i.e. only ONE and exacly one hould be set for the callback data.
'   Once set they should never change
    FLTFL_CALLBACK_DATA_IRP_OPERATION = &H00000001  ' Set for Irp operations
    FLTFL_CALLBACK_DATA_FAST_IO_OPERATION = &H00000002  ' Set for Fast Io operations
    FLTFL_CALLBACK_DATA_FS_FILTER_OPERATION = &H00000004  ' Set for Fs Filter operations
'   In principle this flag can be set for any operation. Once set it shouldn't change
    FLTFL_CALLBACK_DATA_SYSTEM_BUFFER = &H00000008  ' Set if the buffer passed in for the i/o was a system buffer
'   Below flags are relevant only for IRP-based i/o - i.e. only
'   if FLTFL_CALLBACK_DATA_IRP_OPERATION was set. If the i/o was reissued
'   both flags will necessarily be set
    FLTFL_CALLBACK_DATA_GENERATED_IO = &H00010000  ' Set if this is I/O generated by a mini-filter
    FLTFL_CALLBACK_DATA_REISSUED_IO = &H00020000  ' Set if this I/O was reissued
'   Below 2 flags are set only for post-callbacks.
    FLTFL_CALLBACK_DATA_DRAINING_IO = &H00040000  ' set if this operation is being drained. If set,
    FLTFL_CALLBACK_DATA_POST_OPERATION = &H00080000  ' Set if this is a POST operation
'   This flag can only be set by Filter Manager, only for an IRP based operation
'   and only for a post callback. When set, it specifies that a lower level driver
'   allocated a buffer for AssociatedIrp.SystemBuffer in which the data for
'   the operation will be returned to the IO manager. Filters need to know this
'   because when they were called in the PRE operation AssociatedIrp.SystemBuffer
'   was null and as such their buffer is set to UserBuffer and they have no way of
'   getting the real data from SystemBuffer. Check the IRP_DEALLOCATE_BUFFER flag for
'   more details on how this is used by file systems.
    FLTFL_CALLBACK_DATA_NEW_SYSTEM_BUFFER = &H00100000
'   Flags set by mini-filters: these are set by the minifilters and may be reset
'   by filter manager.
    FLTFL_CALLBACK_DATA_DIRTY = &H80000000  ' Set by caller if parameters were changed
End Enum

Public Enum FLT_ALLOCATE_CALLBACK_DATA_FLAGS
    FLT_ALLOCATE_CALLBACK_DATA_PREALLOCATE_ALL_MEMORY = &H1
End Enum

Public Type FLT_IO_PARAMETER_BLOCK
    '  Fields from IRP
    '  Flags
    IrpFlags As Long
    '  Major/minor functions from IRP
    MajorFunction As Byte
    MinorFunction As Byte
    '  The flags associated with operations.
    '  The IO_STACK_LOCATION.Flags field in the old model (SL_* flags)
    /* [ TypeHint(IoStackLocFlags) ] */ OperationFlags As Byte
    '  For alignment
    Reserved As Byte
    '  The FileObject that is the target for this
    '  IO operation.
    TargetFileObject As LongPtr ' PFILE_OBJECT
    '  Instance that i/o is directed to
    TargetInstance As LongPtr 'PFLT_INSTANCE
    '  Normalized parameters for the operation
    'Parameters As FLT_PARAMETERS
    'This needs to be expanded or at least verified:
    #If Win64 Then
        Parameters(47) As Byte
    #Else
        Parameters(27) As Byte
    #End If
End Type

Public Type FLT_CALLBACK_DATA
    Flags As FLT_CALLBACK_DATA_FLAGS
    Thread As LongPtr 'PETHREAD
    Iopb As LongPtr 'PFLT_IO_PARAMETER_BLOCK
    IoStatus As IO_STATUS_BLOCK
    TagData As LongPtr '_FLT_TAG_DATA_BUFFER *
    FilterCtxOrQueueLnkCtx(3) As LongPtr
    /* [ TypeHint(_MODE) ] */ RequestorMode As Byte 'KPROCESSOR_MODE
End Type


Public Declare PtrSafe Function FltRegisterFilter Lib "fltmgr.sys" (Driver As DRIVER_OBJECT, Registration As _FLT_REGISTRATION, RetFilter As LongPtr) As Long
Public Declare PtrSafe Function FltUnregisterFilter Lib "fltmgr.sys" (ByVal Filter As LongPtr) As Long
Public Declare PtrSafe Function FltStartFiltering Lib "fltmgr.sys" (ByVal Filter As LongPtr) As Long
Public Declare PtrSafe Function FltGetFileNameInformation Lib "fltmgr.sys" (CallbackData As FLT_CALLBACK_DATA, NameOptions As FLT_FILE_NAME_OPTIONS, FileNameInformation As FLT_FILE_NAME_INFORMATION) As NTSTATUS

End Module